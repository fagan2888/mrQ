function [PDcombineInfo]=mrQ_BuildCoilsfitsPDPhantom(outDir,exsistFit,M0cfile,sqrtF,GEDIr)
%
% mrQ_BuildCoilsfitsPD(outDir,M0cfile,intervals,sqrtF,GEDIr)
%
% # Build the PD from the image boxes we fit before
% (mrQ_fitPD_multicoil.m).
% the function load the fitted image boxes find the box are off by a scalre
% we first try to estimate a scalere of all the boxes
% then we combine and avrage the overlap boxes (median). last we check for
% a smooth gain map between this fitted PD and the M0 image.
%
%
% INPUTS: 
%   outDir      - The output directory - also reading file from there
%
%   exsistFit   - in case this function was runbefore and the coils waits
%                are avilable we can continue from there
%
%   M0cfile     - The combined/aligned M0 data
%
%   sqrtF       - use the sqrt of the signal (defult is no zero)
%
%  GEDIr         -the directory where the fitLog.mat where saved. this structure have all the needed parameter to build the PD map. 
%
% OUTPUTS
%we save a list of the path for the files we calculate the PD files the
%gain and water fraction (WF);


%% CHECK INPUTS AND SET DEFAULTS



if notDefined('exsistFit')
    exsistFit =[]; 
end
% if the M0cfile is not an input  we load the file that was made by mrQ_multicoilM0.m (defult)

if notDefined('M0cfile')
    M0cfile = fullfile(outDir,'AligncombineCoilsM0.nii.gz'); 
end
 if ~exist(M0cfile,'file')
        disp(' can not find the multi coils M0 file')
        error
    end
% load the fit parameter and define a outDir1 where we will save the
% intermidate files
if(exist('GEDIr','var')  && ~isempty(GEDIr))
    logname=[GEDIr '/fitLog.mat'];
    outDir1=GEDIr;
     load(logname);
     JBname=[GEDIr '/M0boxfit_iter'] ;


else
    
%    outDir1=outDir;
    logname=[outDir '/fitLog.mat'];
     load(logname);
    JBname=opt{1}.name;%[dirname '/M0boxfit_iter'] ;
outDir1=fileparts(JBname);
end


if isfield(opt{1},'sqrtF')
    sqrtF=(opt{1}.sqrtF);
end
if(~exist('sqrtF','var')  || isempty(sqrtF))
    sqrtF=0;
end

BMfile=fullfile(outDir,'brainMask.nii.gz');

if(exist(BMfile,'file'))
  %  disp(['Loading brain Mask data from ' BMfile '...']);
    brainMask = readFileNifti(BMfile);
    xform=brainMask.qto_xyz;
    mmPerVox=  brainMask.pixdim;
    brainMask=logical(brainMask.data);

else
    disp(['error , can not find the file: '   BMfile]);
end;


% Define the mask that will be used to find the boxes to fit
% Create morphological structuring element (STREL)
NHOOD=[0 1 0; 1 1 1; 0 1 0];
NHOOD1(:,:,2)=NHOOD;

NHOOD1(:,:,1)=[0 0 0; 0 1 0; 0 0 0];
NHOOD1(:,:,3)=NHOOD1(:,:,1);
SE = strel('arbitrary', NHOOD1);

% parameter of the image box we will load

jumpindex=opt{1}.jumpindex;
jobindexs=1:ceil(length(opt{1}.wh)/jumpindex);

%%
% This loop checks if all the outputs have been saved or waits until
% they are all done, it it's too long run again

if (exist(exsistFit,'file'))
    StopAndload=1;
else


StopAndload=0;
fNum=ceil(length(opt{1}.wh)/jumpindex);
sgename=opt{1}.SGE;
tic
while StopAndload==0
    % List all the files that have been created from the call to the
    % grid
    list=ls(outDir1);
    % Check if all the files have been made.  If they are, then collect
    % all the nodes and move on.
    if length(regexp(list, '.mat'))>=fNum,
        StopAndload=1;
        % Once we have collected all the nodes we delete the sge outpust
        eval(['!rm -f ~/sgeoutput/*' sgename '*'])
    end
    
    % Record how much time has elapsed since the call to the grid.
    t = toc;
    % If too much time has elapsed then we recall the grid;
    if t > 86400% 24hours
        reval=[]
        ch=[1:jumpindex:length(opt{1}.wh)]; %the sge nude files name
        k=0;
        reval=[];
        for ii=1:length(ch),
            ex=['_' num2str(ch(ii)) '_'];
            if length(regexp(list, ex))==0, %lets find which files are missing
                k=k+1;
                reval(k)=(ii); % list of file for sge reavaluation
            end
        end;
        if length(find(reval))>0
            eval(['!rm /home/avivm/sgeoutput/*' sgename '*']) % we delete all our relevant grid jobs
            sgerun('mrQ_fitT1PD_SGE(opt,500,jobindex);',sgename,1,reval,[],[],3000); % we run the missing oupput again
        else
            display('somting is wrong in SGE run')
            error
        end
    end
    
end
end
 %% load the fit
 
%initilaized the parameters    
    Fits=zeros(opt{1}.numIn,size(opt{1}.Poly,2),length(opt{1}.wh));
    resnorms=zeros(length(opt{1}.wh),1);
    exitflags=zeros(length(opt{1}.wh),1);
    CoilsList=zeros(length(opt{1}.wh),opt{1}.numIn);

    opt{1}.brainMask=brainMask;


% loop over the fitted box files and load the parameters to  matrixs
    for i=1:length(jobindexs);



        st=1 +(jobindexs(i)-1)*jumpindex;
        ed=st+jumpindex-1;
        if ed>length(opt{1}.wh), ed=length(opt{1}.wh);end;

        Cname=[JBname '_' num2str(st) '_' num2str(ed)];
        load(Cname);
        ss=length(resnorm);
        if isempty(res)
            res=0;
        end

         Fits(:,:,st:st+ss-1)=res;
        resnorms(st:st+ss-1)=resnorm;
        exitflags(st:st+ss-1)=exitflag;
        
        CoilsList(st:st+ss-1,:)= coilList(:,1:ss)';

    end;
%%
% load the M0 imaged that was used to the fit (multi coils 4D)
    M=readFileNifti(M0cfile);
    coils=size(M.data,4);
    
    
    
    %% combine the fitted boxes
        disp(' combine the PD image parts ')

     if (exist(exsistFit,'file'))
         load (exsistFit)
    else
    % first crate a matrix (mat) that build for liniaer eqation estimation
    % the function mrQ_BoxsAlignment look for the gain that each box need
    % to mach it nibohor. 
    % one books  Reference are arbitrary made to be equal one
    % mat is build that we add one box and substracting the other box so it
    % the eqation equal zero. 
    %we have box/box matrix that eqal zerow beside one box that equal one 
    
    
   
    [mat err Reference matdc]= mrQ_BoxsAlignment(M,opt,Fits,CoilsList,sqrtF);

       name=[outDir1 '/tmpFit' date];
    %toc
     save(name,'mat', 'err', 'Reference', 'matdc')
    
 
PDcombineInfo.boxAlignfile=name;
    end
  
  % we can try to solve the mat eqation as set of lalinear eqation 
  % this will find the best boxs scaler that when we add it to the other that overlap to it they will cancel wach other.
  %and the Reference will equal one.
%  mat*C=y
  % y is zeors (box X 1) with a single 1 in the reference box location
  % mat is the eqtions of adding the niboring boxes 
  % C is the scals of the box (that we try to find)
  
%y=mat(Reference,:); 
%y=y';
y=zeros(size(err,1),1);
y(Reference)=1;
%solve it as multi  linear eqation
C=pinv(mat'*mat)*mat'*y;
% the C we need is one over the one we fit
C1=1./C;

% now when we have the scales we can combine the boxes
%we like to exlude crazy boxs (very high or low scale 
% we know that C sepuuse to be around 1 if every thing went right

wh1=find(C1>0.1 & C1<2);
%
%in orther to avrage we need to keep track of the nmber of estimation of
%each voxel (overlaping boxes makes it grater then one). we will keep
%records on that by Avmap
Avmap=zeros(size(M.data(:,:,:,1)));
%we will save the avrage in M0f
M0f=zeros(size(M.data(:,:,:,1)));
%we will save the values for median avrage in M0full
M0full=M0f(:);

%loop over the boxs 
for jj=1:length(wh1),
   % jj
    clear BB do_now fb Xx Yy Zz skip inDat In use  G Gain1 Val W t ResVal wh whh mask bm c SS  SD MR Val1
    %what box to use
    BB=(wh1(jj));
do_now=opt{1}.wh(BB);

%set mask
mask=zeros(size(M.data(:,:,:,1)));
%get the location of the box in x,y,z cordinate
[fb(1,1) fb(1,2) fb(1,3)]=ind2sub(size(opt{1}.X),do_now);
[Xx Yy Zz,skip]=MrQPD_boxloc(opt{1},fb);

%get the coil list we used in the box
In=CoilsList(BB,:);
use=(find(In));
use=(find(CoilsList(BB,:)));

%load the raw M0 data that was fitted
if sqrtF==1
    %for the case of sqrt on theM0 images (not the defult)
    inDat(:,:,:,:)=double(sqrt(M.data(Xx(1):Xx(2),Yy(1):Yy(2),Zz(1):Zz(2),In(use))));
else
    inDat(:,:,:,:)=double(M.data(Xx(1):Xx(2),Yy(1):Yy(2),Zz(1):Zz(2),In(use)));
end
% get the fitted coefisent of the coil gain estimated by polynomials
G=Fits(use,:,BB);

%calculate PD (val1) from raw M0 images and coils gain
for i=1:size(inDat,4),%opt.numIn
    %
    Gain1(:,:,:,i) = reshape(opt{1}.Poly*G(i,:)',opt{1}.boxS);
    Val1(:,:,:,i) = inDat(:,:,:,i)./Gain1(:,:,:,i);
end;

% we can wait the PD by SNR% we desice not to do that becouse it can bias
% the fits
% W=inDat; %lets wait by coils
% for i=1:size(inDat,4)
%     t=inDat(:,:,:,i);
%     W(:,:,:,i)=mean(t(:));
% end
% W=W./sum(W(1,1,1,:));
%ResVal=sum(Val1.*W ,4); %waited the coils by SNR

% get the avrage PD fit of the different coils
ResVal=mean(Val1,4); %


% get the brain mask of the boxs in box space
bm=opt{1}.brainMask(Xx(1):Xx(2),Yy(1):Yy(2),Zz(1):Zz(2));
% get the brain mask of the boxs in full imaging space
mask(Xx(1):Xx(2),Yy(1):Yy(2),Zz(1):Zz(2))=opt{1}.brainMask(Xx(1):Xx(2),Yy(1):Yy(2),Zz(1):Zz(2));
mask=logical(mask);

%control for outlayers 
c=((std(Val1,[],4)));
wh=find(mask);
SS=c(bm);
Val=ResVal(bm);
SD=std(ResVal(bm));
MR=mean(ResVal(bm));

if (any(Val<0)) %if we still have few nagative values we won't use them for alighnment (happan in the edge of the brain air or noise voxels
        whh=find(Val>0);
        Val=Val(whh);
        wh=wh(whh);
        SS=SS(whh);
    end
    if any(Val>(MR+3*SD)) %if we have very high values e won't use them (happan in the edge of the brain air or noise voxels or some csf voxel that have very low SNR)
        whh=find(Val<(MR+3*SD));
        Val=Val(whh);
        wh=wh(whh);
        SS=SS(whh);
        
    end
    if  any(Val<(MR-3*SD))%if we still have few very low value (happan in the edge of the brain air or noise voxels or some csf voxel that have very low SNR)
        whh=find(Val>(MR-3*SD));
        Val=Val(whh);
        wh=wh(whh);
        SS=SS(whh);
        
    end
    
    if  any(SS>0.06)% if part of this box is unconclusive so the std between the different coils is very high we better not use it. that happean it the edge of the boxs becouse of miss fit; or when single to noise is low  like csf or air edge 
        whh=find(SS<0.06);
        Val=Val(whh);
        wh=wh(whh);
    end
    
%add this box data to the other

% mutipal the result by it scaler 
ResVal=ResVal.*C1(BB);
% for mean avraging
M0f(wh)=M0f(wh)+Val.*C1(BB);
Avmap(wh)=Avmap(wh)+1;

%this is to mesure the median avraging 
szz1=size(M0full,2);
Raw=max(max(Avmap(:)),szz1);
Col=length(M0f(:));
szz=[Col,Raw ];

tmp=zeros(szz);
tmp(:,1:szz1)=M0full;

wh0=  sub2ind(szz,wh,Avmap(wh));
tmp(wh0)=Val.*C1(BB);
M0full=tmp;

end
%%
% mean avrage the PD values
M0f(find(M0f))=M0f(find(M0f))./Avmap(find(M0f));

%median avrage the PD values
M0full(M0full==0)=nan;
M0full=nanmedian(M0full,2);
M0full=reshape(M0full,size(M0f));

%% save the median and mean PD 
PDfile2=fullfile(outDir1,['PD_fitGboxMedian.nii.gz']);

PDfile1=fullfile(outDir1,['PD_fitGboxmean.nii.gz']);

if sqrtF==1
    %if sqrt was applied we will undo it now
 dtiWriteNiftiWrapper(single(M0f).^2, xform, PDfile1);
  dtiWriteNiftiWrapper(single(M0full).^2, xform, PDfile2);

else
    dtiWriteNiftiWrapper(single(M0f), xform, PDfile1);
    dtiWriteNiftiWrapper(single(M0full), xform, PDfile2);

 
end
PDcombineInfo.meanFile=PDfile1;
PDcombineInfo.meadianFile=PDfile2;

%% finalizing the PD fits
% the fitted PD is still not complited becouse some area add cruzy fits or
% no fits for different reason. the saved PD are therefore still with holls
% also some time the edged between the boxes can still appear (not a
% perfect scale estimation or boxs fits).
%the last step 
% in the last step % we will derive the gain by devide M0/pd=Gain for each coil.
%we will asume that the gain must be smooth (we now it is, realy) so we
%will smooth it and get a full PD. and WF maps.


 [PDcombineInfo.WFfile1,PDcombineInfo.Gainfile1]=mrQ_WFsmooth(outDir,[],PDfile2,[],[],[],outDir);

%
              %   [M0f,donemask,Avmap,errVal] =mrQM0fiti_Res1(opt{1},fb,G,inDat,M0f,donemask,known,Avmap,resnorms(BB),exitflags(BB),errVal);
%                                  [M0f,donemask,Avmap,errVal] =mrQM0fiti_Res2(opt{1},fb,G,inDat,M0f,donemask,known,Avmap,resnorms(BB),exitflags(BB),errVal);

          
    

    
    
   % a=1;
    return
    
    
%     
%     kj=1;
%     for jjj=1:1%intervals
%         for jj=1:100 
%         
%      %   Avmap=zeros(size(brainMask));
% % M0ft=zeros(size(brainMask));
% % M0ftfull=zeros([size(M0ft) 27]);
% %M0f=zeros(size(brainMask));
% 
%         
%         
%          controlmask=zeros(size(opt{1}.X));
%     donemask=opt{1}.donemask;
% 
%         select=0;
%         while select==0
%             controlmask1=controlmask;
%             tt=controlmask1;
%             s(1:8)=0;
%             if length(find((CoilsList(St(kj),:)==0)))>2;
%                 kj=kj+1;
%             else
%                 [fb(1,1) fb(1,2) fb(1,3)]=ind2sub(size(opt{1}.X),opt{1}.wh(St(kj)) ) ;
%                  [dd dd dd s(1)]=MrQPD_boxloc(opt{1},fb);
%                 kj=kj+1;                
%                 controlmask1(fb(1,1), fb(1,2), fb(1,3))=1;
%                 tt=imdilate(controlmask1,SE);
%                 stbox=find(tt==1);
%                 
%                 [Xx Yy Zz,s(1)]=MrQPD_boxloc(opt{1},fb);
%                 bm=opt{1}.brainMask(Xx(1):Xx(2),Yy(1):Yy(2),Zz(1):Zz(2));
% 
%                 if length(find(bm))/ length(bm(:))<0.15 % let be sure that we are in side the brain
%                     s(1)=1;
%                 end
%                 
%                 for kk=1:length(stbox)
%                 [fb(1,1) fb(1,2) fb(1,3)]=ind2sub(size(controlmask),stbox(kk));
%                 [dd dd dd s(kk+1)]=MrQPD_boxloc(opt{1},fb);
% 
%                 end
%                 if isempty(find(s==1))
%                     controlmask=controlmask1;
%                     
%                     select=1;
%                 end
%                 
%               
%             end
%         end
%        
%        controlmask=zeros(size(opt{1}.X));    
% clear  tt fb
% 
% 
% 
% 
% 
%  %lets start
%             
%              [M0ft errVal1 controlmask donemask Avmap skipf]=InitializeBoxfit(controlmask1,controlmask,donemask,M,opt,Fits,CoilsList,coils,sqrtF);
%              
%              
%          
%              controlmask1=imdilate(controlmask,SE);
%              controlmask1=controlmask1+donemask;
% 
%  done=0;tt=1;
%  %profile on
%  while done==0
%      
%      do_now=find(controlmask1==1);
%      if isempty(do_now)
%          done=1;
%      else
%          %for kk=1:length(do_now)
%               %  BB=find(opt{1}.wh==do_now(kk));
%                
%       
%              [M0f errVal controlmask donemask Avmap1 skipf]=InitializeBoxfit(controlmask1,controlmask,donemask,M,opt,Fits,CoilsList,coils,sqrtF);
% if skipf==0
%              
%  %       cheack=errVal/errVal1;
% 
%     wh1=find(M0ft>0);
%     wh0=find(M0f>0);
%     [tf, loc]=ismember(wh1,wh0);
%     loc1=loc(loc>0);
%     
%     
%     
%     dc= median((M0ft(wh1(tf)))./(M0f(wh0(loc1))));
%     if isnan(dc)
%         keyboard
%     end
%     
%     err=mean(abs(1-dc.*(M0f(wh0(loc1)))./(M0ft(wh1(tf)))));
%     
%         
%     if err>0.03 || errVal>2*errVal1  || std((M0ft(wh1(tf))))*1.5< std((M0f(wh0(loc1))).*dc) ;
%         keyboard
%         %should we take this pease out? from control mask -make the 1 to
%         %zeors again? also in dwon mask?
%         %should i respeact M0ft some how before?
%     end
%         
%     tmp=(M0ft.*Avmap+M0f.*Avmap1)./(Avmap+Avmap1);
%     
%     M0ft(tmp>0)=tmp(tmp>0);
%     Avmap=Avmap+Avmap1; %we have over representation of voxel ... (we count them more then ones...)
%     
%    % Avmap1=Avmap;
%     %Avmap1(find(M0f>0))= Avmap1(find(M0f>0))+1;
%     
%  
%     clear Avmap1 tmp wh1 wh0
% end
% end  
%              
%          tt=tt+1
%         if tt==100
%             keyboard
%         end        
%         if tt==200
%             keyboard
%         end        
%          if tt==300
%             keyboard
%         end       
%           if tt==500
%             keyboard
%         end       
%         
%          if tt==1000
%             keyboard
%         end    
%      controlmask1=imdilate(controlmask,SE);
%      controlmask1=controlmask1+donemask;
% % end;
% end
%  end
%  
% PDfile1=fullfile(outDir1,['PDsqrt_fitbox_' num2str(j) '_' num2str(jj) '_' num2str(jjj) '.nii.gz']);
% if sqrtF==1
%  dtiWriteNiftiWrapper(single(M0f), xform, PDfile1);
% else
%  dtiWriteNiftiWrapper(single(M0f), xform, PDfile1);
%  if(~exist('sqrtF','var') || isempty(sqrtF))
%     sqrtF=0;
% end
% 
% 
% %                keyboard;
% %M0ftfull(M0ftfull==0)=nan;
% %V=nanmedian(M0ftfull,4);
% %PDfile2=fullfile(outDir1,['PDsqrt_fitboxMedian_' num2str(j)  '_' num2str(jj) '_' num2str(jjj) '.nii.gz']);
% %dtiWriteNiftiWrapper(single(V), xform, PDfile2);
% 
% % WFfile=fullfile(outDir1,['WF_fit_' num2str(j)  '_' num2str(jj) '_' num2str(jjj)  '.nii.gz']);
% 
% %mrQ_WF1(outDir,PDfile1,WFfile)
% %PDmedianfromGain_1(M0ftfull,xform,outDir,j,jj);
% jj
% 
% 
% 
% 
%         end
% %         for jj=1:10
% %             WFfile=fullfile(outDir1,['WF_fit_' num2str(j)  '_' num2str(jj) '_' num2str(jjj)  '.nii.gz']);
% %             PDfile1=fullfile(outDir1,['PDsqrt_fitbox_' num2str(j) '_' num2str(jj) '_' num2str(jjj) '.nii.gz']);
% %             PDfile2=fullfile(outDir1,['PDsqrt_fitboxMedian_' num2str(j)  '_' num2str(jj) '_' num2str(jjj) '.nii.gz']);
% %             WF=readFileNifti(WFfile);
% %             if jj==1;
% %                 WFA=zeros([size(WF.data) 10]);
% %             end
% %             WFA(:,:,:,jj)=WF.data;
% %         end
% %         
% %         WF=median(WFA,4);
% %         
% %         WFfile=fullfile(outDir1,['WF_fitMED' num2str(j)  '_' num2str(jjj)   '.nii.gz']);
% %         
% %         dtiWriteNiftiWrapper(single(WF), xform, WFfile);
% %         str=[ '! rm ' outDir1 '/PDsqrt_fitbox*'];
% %         eval(str);
% %         str=[ '! rm ' outDir1 '/WF_fit_*'];
% %         eval(str);
% % 
% %             
% %             
%      end
%     
% %     for jjj=1:intervals
% %         WFfile=fullfile(outDir1,['WF_fitMED' num2str(j)  '_' num2str(jjj)   '.nii.gz']);
% %         WF=readFileNifti(WFfile);
% %         if jjj==1;
% %             WFA=zeros([size(WF.data) intervals]);
% %         end
% %         WFA(:,:,:,jjj)=WF.data;
% %     end
% %     
% %     WF=median(WFA,4);
% %     
% %     WFfile=fullfile(outDir,['WF_' num2str(j)  '.nii.gz']);
% %     
% %     dtiWriteNiftiWrapper(single(WF), xform, WFfile);
% %     str=[ '! rm ' outDir1 '/WF_fit*'];
% %     eval(str);
% 
%         
%    
% 
